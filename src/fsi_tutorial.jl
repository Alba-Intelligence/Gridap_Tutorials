
# # Tutorial 9: Fluid-structure interaction
#
#md # [![](https://mybinder.org/badge_logo.svg)](@__BINDER_ROOT_URL__/notebooks/fsi_tutorial.ipynb)
#md # [![](https://img.shields.io/badge/show-nbviewer-579ACA.svg)](@__NBVIEWER_ROOT_URL__/notebooks/fsi_tutorial.ipynb)
#
# In this tutorial, we will learn
#
#    -  Bla, bla
#    -  Bla
#
# 1. [Problem Statement](#probStat)
#   1. [Strong form](#strongForm)
#   2. [Geometry and Discrete model](#geometry)
#   3. [Boundary conditions and properties](#conditions)
# 2. [Numerical scheme](#numericalScheme)
#   1. [FE spaces](#feSpace)

# <a name="probStat"></a>
# ## Problem statement
# <a name="strongForm"></a>
# ### Strong form
#  Let $\Gamma_{\rm FS}$ be the interface between a fluid domain $\Omega_{\rm F}$ and a solid domain $\Omega_{\rm S}$. We denote by $\Gamma_{\rm F,D}$ and $\Gamma_{\rm F,N}$ the fluid boundaries with Dirichlet and Neumann conditions, respectively.
# The Fluid-Structure Interaction (FSI) problem reads:
#
# find $ u_{\rm F} $, $ p_{\rm F} $ and $ u_{\rm S} $ such that
# ```math
# \left\lbrace
# \begin{aligned}
# -\nabla\cdot\boldsymbol{\sigma}_{\rm F} = f &\text{ in }\Omega_{\rm F},\\
# \nabla\cdot u_{\rm F} = 0 &\text{ in } \Omega_{\rm F},\\
# -\nabla\cdot\boldsymbol{\sigma}_{\rm S} = s &\text{ in }\Omega_{\rm S},\\
# \end{aligned}
# \right.
# ```
#
# satisfying the Dirichlet and Neumann boundary conditions
# ```math
# \left\lbrace
# \begin{aligned}
# u_{\rm F} = g &\text{ on } \Gamma_{\rm F,D},\\
# \boldsymbol{\sigma}_{\rm F}\cdot n_{\rm F} = 0 &\text{ on } \Gamma_{\rm F,N},\\
# \end{aligned}
# \right.
# ```
#
# and the kinematic and dynamic conditions at the fluid-solid interface
# ```math
# \left\lbrace
# \begin{aligned}
# u_{\rm F} = u_{\rm S} &\text{ on } \Gamma_{\rm FS},\\
# \boldsymbol{\sigma}_{\rm F}\cdot n_{\rm F} + \boldsymbol{\sigma}_{\rm S}\cdot n_{\rm S} = 0 &\text{ on } \Gamma_{\rm FS}.\\
# \end{aligned}
# \right.
# ```
#
# Where $\boldsymbol{\sigma}_{\rm F}(u_{\rm F},p_{\rm F})=2\mu_{\rm F}\boldsymbol{\varepsilon}(u_{\rm F}) - p_{\rm F}\mathbf{I}$ and $\boldsymbol{\sigma}_{\rm S}(u_{\rm S})=2\mu_{\rm S}\boldsymbol{\varepsilon}(u_{\rm S}) +\lambda_{\rm S}tr(\boldsymbol{\varepsilon}(u_{\rm S}))\mathbf{I}$.

# <a name="geometry"></a>
# ### Geometry and Discrete model
# In this tutorial we solve the benchmark descrived in [1], consisting on a flow over an elastic flag after a cylinder.
# The computational domain is defined by a channel of size $\Omega \doteq (0,4.5)\times(0,0.41)$, with an embedded cylinder of radius $R=0.05$ and center at $C=(0.2,0.2)$. The associated FE triangulati is denoted by $\mathcal{T}$, the fluid and solid domain and their associated triangulations will be denoted by $\Omega_{\rm F}$, $\Omega_{\rm S}$, $\mathcal{T}_{\rm F}$ and $\mathcal{T}_{\rm F}$, respectively.
#
# In order to load the discrete model we first setup Gridap
using Gridap

# The discrete model for the elastic flag problem is generated by loading the ``"models/elasticFlag.json`` file.
model = DiscreteModelFromFile("models/elasticFlag.json")

# We can inspect the loaded geometry and associated parts by printing to a ``vtk`` file:
writevtk(model,"model")

# This will produce an output in which we can identify the different parts of the domain, with the associated labels and tags.
#
# | Part | Notation | Label | Tag |
# | :---: | :---:| :---: | :---: |
# | Solid-cylinder wall | $\Gamma_{\rm S,D_{cyl}}$ | "fixed" | 1 |
# | Fluid-solid interface | $\Gamma_{\rm FS}$ | "interface" | 2 |
# | Channel inlet | $\Gamma_{\rm F,D_{in}}$ | "inlet" | 3 |
# | Channel outlet | $\Gamma_{\rm F,N_{out}}$ | "outlet" | 4 |
# | Channel walls | $\Gamma_{\rm F,D_{wall}}$ | "noSlip" | 5 |
# | Fluid-cylinder wall | $\Gamma_{\rm F,D_{cyl}}$ | "cylinder" | 6 |
# | Fluid domain | $\Omega_{\rm F}$ | "fluid" | 7 |
# | Solid domain | $\Omega_{\rm S}$ | "solid" | 8 |
#
# ![](../assets/fsi/tags.png)

# <a name="conditions"></a>
# ### External conditions and properties
# #### Boundary conditions
# We apply Dirichlet boundary conditions at the channel inlet, upper and lower boundaries and on the cylinder. A parabolic profile is enforced at the channel inlet, while a no-slip condition is imposed on the remaining Dirichlet boundaries.
# ```math
# \left\lbrace
# \begin{aligned}
# u_{\rm F,in}(x,y) = 1.5U\frac{y(H −y)}{\left(\frac{H}{2}\right)^2}\quad&\mbox{on }\Gamma_{\rm F,D_{in}},\\
# u_{\rm F,0}(x,y) = [0, 0]\quad&\mbox{on }\Gamma_{\rm F,D_{wall}}\cup\Gamma_{\rm F,D_{cyl}},\\
# u_{\rm S,0}(x,y) = [0, 0]\quad&\mbox{on }\Gamma_{\rm S,D_{cyl}}.\\
# \end{aligned}
# \right.
# ```
const U = 1.0
const H = 0.41
uf_in(x) = VectorValue( 1.5 * U * x[2] * ( H - x[2] ) / ( (H/2)^2 ), 0.0 )
uf_0(x) = VectorValue( 0.0, 0.0 )
us_0(x) = VectorValue( 0.0, 0.0 )

# We consider a free tranction condition at the channel outlet
# ```math
# \boldsymbol{\sigma}_{\rm F}\cdot n_{\rm F} = \mathbf{0}\quad\mbox{on }\Gamma_{\rm F,N}
# ```
hN(x) = VectorValue( 0.0, 0.0 )
p_jump(x) = 0.0

# <a name="forces"></a>
# #### External forces
# In this test, the body forces acting on the fluid an solid are zero.
f(x) = VectorValue( 0.0, 0.0 )
s(x) = VectorValue( 0.0, 0.0 )
g(x) = 0.0

# <a name="properties"></a>
# #### Material properties
# We use a linear elastic constitutive law for the elastic flag. Given the Young's modulus $E$ and the Poisson ratio $\nu$, we can compute the Lamé constants, $\lambda$ and $\mu$, using the following function:
function lame_parameters(E,ν)
  λ = (E*ν)/((1+ν)*(1-2*ν))
  μ = E/(2*(1+ν))
  (λ, μ)
end

# Then, we get the Lamé parameters for a solid with $E=1.0$ MPa and $\nu=0.33$.
const E_s = 1.0
const ν_s = 0.33
const (λ_s,μ_s) = lame_parameters(E_s,ν_s)

# The Cauchy stress tensor for the solid part is defined by $\sigma_s = 2\mu\varepsilon + \lambda tr(\varepsilon)\mathbf{I}$. Note that we use the trace operator from the `LinearAlgebra` package. With the macro `@law` we are able to define a function whose arguments depend on the coordinates, without the need of passing such coordinates as an argument.
using LinearAlgebra: tr
@law σ_s(ε) = λ_s*tr(ε)*one(ε) + 2*μ_s*ε

# For the fluid part, we only need to define the viscosity $\mu_f$, which we set to $0.01$.
const μ_f = 0.01

# The Cauchy stress tensor for the fluid part is given by $\sigma_f = \sigma^{dev}_f - p\mathbf{I}$, with $\sigma^{dev}_f=2\mu_f$ the deviatoric part of the stress. Since we use a mixed form with the pressure $p$ as an unknown, the stress law will only involve the deviatoric part.
@law σ_dev_f(ε) = 2*μ_f*ε

# <a name="numericalScheme"></a>
# ## Numerical scheme
# <a name="feSpace"></a>
# ### FE Spaces
# Triangulation of the full domain
trian = Triangulation(model)

# Solid & fluid triangulation & models
model_solid = DiscreteModel(model,"solid")
model_fluid = DiscreteModel(model,"fluid")
trian_solid = Triangulation(model_solid)
trian_fluid = Triangulation(model_fluid)


order = 2
# #### Case A: same FE space for fluid and solid velocities
Va = TestFESpace(
  model=model,
  valuetype=VectorValue{2,Float64},
  reffe=:Lagrangian,
  order=order,
  conformity =:H1,
  dirichlet_tags=["inlet", "noSlip", "cylinder", "fixed"])

# #### Case B: Different FE space for fluid and solid velocities
Vbf = TestFESpace(
    model=model_fluid,
    valuetype=VectorValue{2,Float64},
    reffe=:Lagrangian,
    order=order,
    conformity =:H1,
    dirichlet_tags=["inlet", "noSlip", "cylinder"])
Vbs = TestFESpace(
    model=model_solid,
    valuetype=VectorValue{2,Float64},
    reffe=:Lagrangian,
    order=order,
    conformity =:H1,
    dirichlet_tags=["fixed"])

Q = TestFESpace(
  model=model_fluid,
  valuetype=Float64,
  order=order-1,
  reffe=:Lagrangian,
  conformity=:C0)

Ua = TrialFESpace(Va,[uf_in, uf_0, uf_0, us_0])
Ubf = TrialFESpace(Vbf,[uf_in, uf_0, uf_0])
Ubs = TrialFESpace(Vbs,[us_0])
P = TrialFESpace(Q)

Ya = MultiFieldFESpace([Va,Q])
Yb = MultiFieldFESpace([Vbs,Vbf,Q])
Xa = MultiFieldFESpace([Ua,P])
Xb = MultiFieldFESpace([Ubs,Ubf,P])

# <a name="integration"></a>
# ### Numerical integration
# Interior quadratures:
degree = 2*order
quad = CellQuadrature(trian,degree)
quad_solid = CellQuadrature(trian_solid,degree)
quad_fluid = CellQuadrature(trian_fluid,degree)

# Boundary triangulations and quadratures:
bdegree = 2*order
trian_Γout = BoundaryTriangulation(model,"outlet")
quad_Γout = CellQuadrature(trian_Γout,bdegree)
n_Γout = get_normal_vector(trian_Γout)

# Interface triangulations and quadratures:
# This returns a SkeletonTriangulation whose normal vector
# goes outwards to the fluid domain.
idegree = 2*order
trian_Γfs = InterfaceTriangulation(model_fluid,model_solid)
n_Γfs = get_normal_vector(trian_Γfs)
n_Γsf = - n_Γfs
quad_Γfs = CellQuadrature(trian_Γfs,idegree)

# <a name="weakForm"></a>
# ### Weak form
# Case A
function a_solid_A(x,y)
  u,p = x
  v,q = y
  inner( ε(v), σ_s(ε(u)) )
end

function l_solid_A(y)
  v,q = y
  v*s
end

function a_fluid_A(x,y)
  u,p = x
  v,q = y
  inner( ε(v), σ_dev_f(ε(u)) ) - (∇*v)*p + q*(∇*u)
end

function l_fluid_A(y)
  v,q = y
  v*f + q*g
end

function l_Γn_fluid_A(y)
  v,q = y
  v*hN
end

# Pressure drop at the interface
function l_Γ_A(y)
  v,q = y
  - mean(n_Γfs*v)*p_jump
end

# Case B
function a_solid_B(x,y)
  us,uf,p = x
  vs,vf,q = y
  inner( ε(vs), σ_s(ε(us)) )
end

function l_solid_B(y)
  vs,vf,q = y
  vs*s
end

function a_fluid_B(x,y)
  us,uf,p = x
  vs,vf,q = y
  inner( ε(vf), σ_dev_f(ε(uf)) ) - (∇*vf)*p + q*(∇*uf)
end

function l_fluid_B(y)
  vs,vf,q = y
  vf*f + q*g
end

function l_Γn_fluid_B(y)
  vs,vf,q = y
  vf*hN
end

# Nitsche's method to enforce interface conditions
# See for instance: *Burman, Erik, and Miguel A. Fernández. "Stabilized explicit coupling for fluid–structure interaction using Nitsche's method." Comptes Rendus Mathematique 345.8 (2007): 467-472.*
const γ = 1.0
const h = 0.05
const χ = -1.0
function nitsche_Γ(x,y)
  us_Γ, uf_Γ, p_Γ = x
  vs_Γ, vf_Γ, q_Γ = y
  uf = jump(uf_Γ)
  p = jump(p_Γ)
  us = -jump(us_Γ)
  vf = jump(vf_Γ)
  q = jump(q_Γ)
  vs = -jump(vs_Γ)
  εuf = jump(ε(uf_Γ))
  εvf = jump(ε(vf_Γ))

  # Penalty:
  penaltyTerms = (γ/h)*vf*uf - (γ/h)*vf*us - (γ/h)*vs*uf + (γ/h)*vs*us
  # Integration by parts terms:
  integrationByParts = ( vf*(p*n_Γfs) - vf*(σ_dev_f(εuf)*n_Γfs) ) - ( vs*(p*n_Γfs) - vs*(σ_dev_f(εuf)*n_Γfs) )
  # Symmetric terms:
  symmetricTerms =  ( -χ*q*(n_Γfs*uf) - χ*(σ_dev_f(εvf)*n_Γfs)*uf ) - ( -χ*q*(n_Γfs*us) - χ*(σ_dev_f(εvf)*n_Γfs)*us )

  penaltyTerms + integrationByParts + symmetricTerms
end

# <a name="algebraic"></a>
# ### Algebraic System of Equations
t_Ω_solid_A = AffineFETerm(a_solid_A,l_solid_A,trian_solid,quad_solid)
t_Ω_solid_B= AffineFETerm(a_solid_B,l_solid_B,trian_solid,quad_solid)
t_Ω_fluid_A = AffineFETerm(a_fluid_A,l_fluid_A,trian_fluid,quad_fluid)
t_Ω_fluid_B = AffineFETerm(a_fluid_B,l_fluid_B,trian_fluid,quad_fluid)
t_Γfs = LinearFETerm(nitsche_Γ,trian_Γfs,quad_Γfs)

t_Γn_fluid_A = FESource(l_Γn_fluid_A,trian_Γout,quad_Γout)
t_Γn_fluid_B = FESource(l_Γn_fluid_B,trian_Γout,quad_Γout)
t_Γ = FESource(l_Γ_A,trian_Γfs,quad_Γfs)

opA = AffineFEOperator(Xa,Ya,t_Ω_solid_A,t_Ω_fluid_A,t_Γn_fluid_A,t_Γ)
uhA, phA = solve(opA)
opB = AffineFEOperator(Xb,Yb,t_Ω_solid_B,t_Ω_fluid_B,t_Γn_fluid_B,t_Γfs)
uhsB, uhfB, phB = solve(opB)


# <a name="postprocess"></a>
# ## Post-processing
# <a name="visualization"></a>
# ### Visualization
phA_fluid = restrict(phA, trian_fluid)
phB_fluid = restrict(phB, trian_fluid)
uhfB_fluid = restrict(uhfB, trian_fluid)
uhsB_solid = restrict(uhsB, trian_solid)

writevtk(trian_fluid,"trian_fluid",cellfields=["phA"=>phA_fluid,"uhfB"=>uhfB_fluid])
writevtk(trian_solid,"trian_solid",cellfields=["uhsB"=>uhsB_solid])
writevtk(trian,"trian", cellfields=["uhA" => uhA, "phA"=> phA, "uhsB" => uhsB, "uhfB" => uhfB, "phB" => phB])

# <a name="QOIs"></a>
# ### Quantities of Interest
trian_ΓS = BoundaryTriangulation(model,["cylinder","interface"])
quad_ΓS = CellQuadrature(trian_ΓS,bdegree)
n_ΓS = get_normal_vector(trian_ΓS)
uh_ΓS = restrict(uhfB_fluid,trian_ΓS)
ph_ΓS = restrict(phB_fluid,trian_ΓS)
FD, FL = sum( integrate( (σ_dev_f(ε(uh_ΓS))*n_ΓS - ph_ΓS*n_ΓS), trian_ΓS, quad_ΓS ) )
println("Drag force: ", FD)
println("Lift force: ", FL)
#end # module

# ## References
# [1] Turek, S., Hron, J., Madlik, M., Razzaq, M., Wobker, H., & Acker, J. F. (2011).* Numerical simulation and benchmarking of a monolithic multigrid solver for fluid-structure interaction problems with application to hemodynamics*. In Fluid Structure Interaction II (pp. 193-220). Springer, Berlin, Heidelberg.*
